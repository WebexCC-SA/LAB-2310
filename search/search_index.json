{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This is my Test Document</p>"},{"location":"Excercise1/","title":"Lab 1 - Configure and Debug Inbound Call Flows","text":""},{"location":"Excercise1/#lab-1-configure-and-debug-tenant-call-flows","title":"Lab 1 - Configure and Debug Tenant Call Flows","text":"<p>Please use the following credentials to connect to Control Hub and configure Webex Contact Center:</p> <code>Control Hub URL</code> https://admin.webex.com <code>Username</code> labuserID@wx1.wbx.ai  (where ID is your assigned pod number; this ID will be provided by your proctor) <code>Password</code> webexONE1!"},{"location":"Excercise1/#objective","title":"Objective","text":"<p>The objective of this self-paced lab is to provide participants with hands-on experience in configuring and debugging tenant call flows, as well as analyzing agent performance through call reports. This excercise has been divided into three sections</p> <ul> <li> <p>Section 1: Discover Tenant Call Flow Configuration: This section aims to familiarize participants with the existing call flow configurations within a tenant environment.</p> </li> <li> <p>Section 2: Configure and Debug an Inbound Flow: In this part, participants will set up an inbound flow with a whisper announcement and a \"Team\" and \"Longest Available\" distribution strategy. They will use the flow debugger to identify and resolve common misconfigurations encountered during the setup process.</p> </li> <li> <p>Section 3: Analyze Agent Performance with Call Reports: After creating the inbound flow and presenting calls to a test agent, participants will intentionally trigger specific events. They will reject one call and allow a second to result in a Re-Route on No Answer (RONA) event. This will enable them to explore and analyze call reports to understand agent behavior and pinpoint the root cause of the rejected and RONA calls.</p> </li> </ul>"},{"location":"Excercise1/#section-1-discover-tenant-call-flow-configuration","title":"Section 1 : Discover Tenant Call Flow Configuration","text":"<ul> <li> <p>Open your web browser and navigate to https://admin.webex.com</p> </li> <li> <p>Log in using the provided credentials.</p> </li> <li> <p>In Control Hub, locate Services and click on Contact Center. </p> <p></p> </li> <li> <p>In the Contact Center navigation pane on the left side, scroll down to the Tenant Settings section and click on General.</p> <p></p> </li> <li> <p>Under the General settings, locate the Telephony type. Confirm that it states: Webex Calling.</p> <p></p> </li> <li> <p>In the Contact Center navigation pane, under the Customer Experience section, select Channels and search for the entry point named: Entry Point-1.</p> <p></p> </li> <li> <p>Within the details for Entry Point-1, locate the Phone Number section and note the Webex Calling location and the Support Number.</p> <ul> <li>Webex Calling location: [RTP Location 8]</li> <li>Support Number: [+19842906065]</li> </ul> <p></p> </li> <li> <p>Go back to the main menu of Control Hub. </p> </li> <li> <p>Under the Management section, select Locations. </p> </li> <li> <p>In the Locations search bar, enter the Webex Calling location name you discovered in the previous step. </p> <p></p> </li> <li> <p>Select the discovered location. </p> </li> <li> <p>In the PSTN tab, under the PSTN Configuration section, the identified connection is Cisco Calling Plan.</p> <p></p> </li> <li> <p>Click on the Manage section and it provides all the details of the connection type</p> <p></p> </li> <li> <p>Based on the observed calling connection (e.g., Cisco Calling Plan) and the information presented in the call flow slides, this configuration matches Flow Type 1.</p> </li> </ul>"},{"location":"Excercise1/#section-2-configure-and-debug-an-inbound-flow","title":"Section 2 : Configure and Debug an Inbound Flow","text":"<ul> <li> <p>The steps below covers the process for handling an incoming call, ensuring all necessary settings are in place for the agent to receive the call.</p> </li> <li> <p>First, to enable call handling options for the agent, navigate to \"Contact Center\" in the Control Hub.</p> <p></p> </li> <li> <p>Go to \"Tenant Settings\" and select \"Desktop\"</p> <p></p> </li> <li> <p>Confirm that </p> <ul> <li>\"End Call\" and \"End Consult\"is enabled.</li> <li>\"Auto Wrap-up interval\" is set to 600 seconds.</li> <li>\"Telephony RONA timeout\" is set to 12 seconds.</li> </ul> <p></p> </li> <li> <p>Navigate to \"Desktop Experience\" and select \"Desktop Profiles.\"</p> <p></p> </li> <li> <p>Choose the WebexOne_AgentProfile and verify that the \"Voice Channel\" options are configured as shown in the following screenshot.</p> <p></p> </li> </ul> <p>Note</p> <p>Depending on the customer's business needs, the desired option can be selected. For example, if a customer wants all of their agents to use WebRTC and no other endpoints, only the 'Desktop' option can be checked. Agents will then only see the desktop option when logging into the desktop. </p> <ul> <li> <p>To confirm that the agent is mapped to this profile, go to the \"Contact Center users\" section in \"User management.\"</p> <p></p> </li> <li> <p>Search for your agent labuserID@wx1.wbx.ai and, in their agent settings, ensure that the \"desktop profile\" is mapped to WebexOne_AgentProfile.</p> <p></p> </li> <li> <p>Now, let's start building the entry point for the external call. To do this, navigate to \"Customer Experience\" and select \"Channels.\"</p> <p></p> </li> <li> <p>Click \"Create a channel.\" </p> </li> <li> <p>In the \"Channel Creation Wizard,\" provide the following details:</p> <ul> <li>Name: Provide a descriptive name for your channel</li> <li>Channel Type: Inbound Telephony</li> </ul> <p></p> <ul> <li>Service Level Threshold: 30 seconds</li> <li>Timezone: America/New York</li> <li>Routing flow: Select Webexone_Flow_[num] (Num is the assigned assignee's number)</li> <li>Music on hold: defaultmusic_on_hold</li> <li>Version label: Latest</li> </ul> <p></p> </li> <li> <p>In the \"Phone numbers\" section, select the following:</p> <ul> <li>Number Webex Calling location: RTP Location 8</li> <li>Support number: Choose the available Number</li> <li>PSTN Region: Default</li> </ul> <p></p> </li> <li> <p>After adding these settings, click \"Create\" to finalize the channel. </p> </li> <li> <p>The way an incoming call is presented to an agent in agent-based routing is via the entry point to the routing flow and the flow mapped to the queue which has the team the agent belongs to. </p> </li> <li> <p>With this logic, let's check the queue and make the necessary configuration. </p> </li> <li> <p>In the Contact Center navigation pane, under Customer Experience, select Queues. </p> <p></p> </li> <li> <p>Click the Create a Queue button</p> <p></p> </li> <li> <p>Configure the new queue by providing the name WebexOne_Queue_[num] and ensuring these settings match:</p> <ul> <li>Contact Direction : Inbound Queue </li> <li>Channel Type : Telephony </li> </ul> <p></p> </li> <li> <p>In Contact Routing Settings, confirm these settings:</p> <ul> <li>Agent Assignment: Teams</li> <li>Routing Pattern: Longest available</li> </ul> <p></p> </li> <li> <p>For, Call Distribution: In group 1, click on the action and ensure the team WebexOne_Team_[num] is added.</p> <p></p> <p></p> </li> <li> <p>In Advanced Settings, ensure that these values are accurate:</p> <ul> <li>Service Level Threshold: 30 seconds</li> <li>Maximum Time in Queue: 30 seconds</li> <li>Default Music in Queue: defaultmusic_on_hold.wav</li> </ul> <p></p> </li> <li> <p>Click Save to finalize the queue. </p> </li> <li> <p>It's time to now test the call. To do this, log in to the Agent Desktop using the provided credentials.</p> <ul> <li>URL: https://desktop.wxcc-us1.cisco.com/</li> <li>Username: Contact the lab proctor if information is unavailable.</li> <li>Password: Contact the lab proctor if information is unavailable. </li> </ul> </li> <li> <p>Please select Desktop as the telephony option, set the Team as WebexOne_Team_[num] , and log in. </p> </li> <li> <p>Ensure that the agent is in Avaialable Status on the desktop. </p> </li> <li> <p>Place a call from your cell phone to the Dialed Number assigned to your entry point and select option 0 to reach the logged-in agent. </p> </li> <li> <p>However, you will notice the call is never presented to the agent, and the caller hears music on hold.</p> </li> <li> <p>Let's troubleshoot to see why the call is not reaching the agent. The best way will be to look at the flow to see what is happening with the call. </p> </li> <li> <p>In the browser tab/window containing Contact Center navigation pane select \"Flows\" under customer experience section and search for the flow you have mapped to the entry point, WebexOne_Flow_[num]</p> <p></p> </li> <li> <p>Click on the \"Debug\" option and review the last call.</p> <p></p> </li> <li> <p>You will notice that the call passed through the \"Menu\" node, where option \"0\" was pressed.</p> <p></p> </li> <li> <p>Then, the call landed in the queue node where the selected queue had the ID \"4d0282c7-6478-444b-b41a-8e331614acae\".</p> <p></p> </li> <li> <p>Now, the call moves to the \"Play Music\" node, where \"defaultmusic_on_hold.wav\" is played instead of being presented to the logged-in agent.</p> <p></p> </li> <li> <p>To figure out what queue it is in the Control Hub, go to the \"Queues\" section and in the URL, append the queue ID \"/4d0282c7-6478-444b-b41a-8e331614acae\" noted before and load the page.</p> <p></p> </li> <li> <p>The queue page that loads is \"WebexOne_Queue_Anuj\" which is not the correct queue for the agent who is logged in.</p> <p></p> </li> <li> <p>To correct this, come back into the Design section of the flow and click on the \"Edit\" option in the flow.</p> <p></p> </li> <li> <p>Select the \"Queue contact\" node, and from the drop-down menu, select the queue that has your team and the agent i.e WebexOne_Queue_[num]</p> <p></p> </li> <li> <p>Toggle \"Validation\" to \"On\" to ensure there are no validation errors, and then publish the flow.</p> <p></p> </li> </ul> <p>Note</p> <p>When publishing, it is important to ensure the label you have set is the same one that was set when the entry point was being mapped to the routing flow.</p> <ul> <li> <p>Place another call from your cell phone to the dialed number you have assigned and select option 0 to succesfully reach the logged-in agent. </p> </li> <li> <p>In the Flow Canvas you can now also check how the calls have travered through valrious nodes by cliking on the Analyze capability and selecting the current day.</p> <p></p> </li> </ul>"},{"location":"Excercise1/#section-3-analyze-agent-performance-with-call-reports","title":"Section 3: Analyze Agent Performance with Call Reports","text":"<ul> <li> <p>The goal of this lab section is to review reports to determine what happened with few calls. </p> </li> <li> <p>To create a dataset of calls, lets simulate some common agent-side issues.</p> </li> <li> <p>First, ensure that the agent is ready and make a call from your cell phone. </p> </li> <li> <p>When the call is presented to the agent, do not accept it. Let the call ring for 12 seconds until it goes to a \"no answer\" state. </p> </li> <li> <p>Hangup to disconnect the call.</p> <p></p> </li> <li> <p>Next, make another call. </p> </li> <li> <p>This time, when the call is presented to the agent, reject the call. Disconnect call from your cell phone.</p> <p></p> </li> <li> <p>Now that you have a variety of calls in the system, you can explore the reports to see how to track \"Contact Offer\" and \"Assignment Failures\" to the agent.</p> </li> <li> <p>In Control Hub under \"Contact Center\" select \"Overview.\" In the \"Quick Links\" section on the right, select \"Analyzer.\"</p> <p></p> </li> <li> <p>Click on \"Visualization\" and double-click the folder WebexOne_Report_User[num] containing your user details.</p> <p></p> </li> <li> <p>There are two reports in the folder which are copy of the stock report: </p> <ul> <li>\"Agent Trace Report\" and </li> <li>\"Queue Activity By Queue Report\".</li> </ul> <p></p> </li> <li> <p>Each report includes three columns:</p> <ul> <li>RONA Count: This captures all calls that failed because the configured RONA timer expired in WxCC (reasonCode: RONA_TIMER_EXPIRED) or  Because of a configured ring timeout on the device (reasonCode: NO_ANSWER_USER). </li> <li>Call Reject Count: This tracks all calls that failed because the agent explicitly declined the call (reasonCode: USER_DECLINED). </li> <li>Offer Error Counts: This reflects call offer and assignment failures to the agent caused by any other error.</li> </ul> </li> <li> <p>To review the \"Agent Trace\" report, first click on the \"Edit\" option </p> <p></p> </li> <li> <p>Ensure that the start time of the report is set for \"Today.\"</p> <p></p> </li> <li> <p>In the profile variables, you can also confirm that the three variables i.e. RONA Count,Call Reject Count , and Offer Error Counts\u2014are present.</p> <p></p> </li> <li> <p>Save the visualizationand Click the \"Preview\" option.</p> </li> <li> <p>You should now see counts for \"RONA\" and \"Call Reject.\" Click on the value and the magnification symbol for a further drill-down of the number.</p> <p></p> </li> <li> <p>To easily review the calls in the report, use the Custom Select option in Agent Name to search for the designated user and their calls</p> <p></p> </li> <li> <p>A new window will pop up with all the details of this call. As needed, you can add fields and measures from the available options to get all the desired information related to the call and the agent.</p> <p></p> </li> <li> <p>To test this, you can click on \"Agent ID\" and it will be appended to the end of the report as a new column.</p> </li> <li> <p>The same process can be used to explore the \"Queue Activity By Queue\" report.</p> </li> </ul> <p>Congratulations!! on completing this section of the lab! </p> <p>You've successfully navigated the complexities of an inbound call flow configuration, debugged common issues, and learned how to analyze agent performance by simulating and tracking different call outcomes in reports.</p>"},{"location":"Excercise2/","title":"Lab 2 - Setup Seamless Call Transfer","text":""},{"location":"Excercise2/#lab-2-seamless-call-transfer-preserving-flow-variables","title":"Lab 2 - Seamless Call Transfer &amp; Preserving flow Variables","text":"<p>Please use the following credentials to connect to Control Hub and configure Webex Contact Center:</p> <code>Control Hub URL</code> https://admin.webex.com <code>Username</code> labuserID@wx1.wbx.ai  (where ID is your assigned pod number; this ID will be provided by your proctor) <code>Password</code> webexONE1!"},{"location":"Excercise2/#objective","title":"Objective","text":"<p>The objective of this exercise is to correct a call flow that currently loses global variables during a transfer.</p> <p>The current flow is as follows: </p> <ul> <li> <p>A customer calls and presses option 1, which transfers the call to another department. This transfer causes the call to leave the system and re-enter through a new entry point, creating a new call leg. Within this new flow, the customer presses the user ID option to reach the correct team and agent.</p> </li> <li> <p>This process presents two main issues for the business:</p> <ul> <li>The call is unnecessarily leaving and re-entering the system.</li> <li>All original global variables are lost during this transfer, which prevents the agent from seeing crucial information.</li> </ul> </li> <li> <p>The task is to correct this flow so that the call is transferred seamlessly to the correct destination while preserving all original global variables for the agent.</p> </li> </ul>"},{"location":"Excercise2/#section-1-experience-the-issue","title":"Section 1 : Experience the Issue","text":"<ul> <li> <p>Ensure that the agent is logged into the desktop and has an \"Available\" status.</p> </li> <li> <p>Call the same entry point number that was configured in Lab 1 for an inbound call and press option 1. </p> </li> <li> <p>You will hear a ringback and a menu prompting you to enter your user ID.</p> </li> <li> <p>The ringback you hear is the first issue, as it indicates a new call is being made and hitting a transferred entry point (DN).</p> </li> <li> <p>Once you enter your user ID, the call will be presented to the agent.</p> </li> <li> <p>Accept the call. </p> </li> <li> <p>On the desktop, you should see two flow variables, \"Wbex_one_Tansfer\" and \"Webex_one\" However, you will notice that they are not appearing.</p> <p></p> </li> <li> <p>This is the second problem: The original flow variables collected in the first flow are being dropped during the transfer.</p> </li> </ul>"},{"location":"Excercise2/#section-2-inspect-the-flow","title":"Section 2 : Inspect the Flow","text":"<ul> <li> <p>To understand why this is happening, let's inspect the first flow.</p> </li> <li> <p>In the Customer Experience section of Control Hub, select \"Flows\" and search for the flow you have mapped to your entry point, \"WebexOne_Flow_[num].\"</p> <p></p> </li> <li> <p>In the menu node for Option 1, you will notice that it maps to a \"Blind Transfer\" node.</p> <p></p> </li> <li> <p>Select the Blind Transfer node, and you will see it is transferring the call to a number \"19842906070\", which is mapped to a different flow called \"WebexOne_Flow_Transfer\"</p> <p></p> </li> <li> <p>This is the core of the problem. We are instructing the flow to transfer the call to an external number, which creates a new call leg. </p> </li> <li> <p>As a result, the variables as well defined in this flow are not being passed to the \"WebexOne_Flow_Transfer\" flow.</p> </li> <li> <p>To check these variables, click on any empty space on the flow canvas and review the right side of the flow in Variable Definition section.</p> <p></p> </li> </ul>"},{"location":"Excercise2/#section-3-correct-the-flow","title":"Section 3 : Correct the Flow","text":"<ul> <li> <p>To rectify this, we need a node that handles internal transfers more effectively. </p> </li> <li> <p>The Flow Designer provides a \"GoTo Node\" specifically for this use case.</p> </li> </ul> <p>Note</p> <p>A GoTo Node is used to seamlessly transfer a call to another flow within the same system, preserving variables.    A Blind Transfer node is used to transfer a call to an external number.</p> <ul> <li> <p>To replace the Blind Transfer node, first enable the edit mode of the flow designer.</p> <p></p> </li> <li> <p>Delete the Blind Transfer node by selecting it and pressing the delete key.</p> <p></p> </li> <li> <p>From the Flow Control section, drag a \"GoTo Node\" onto the canvas.</p> <p></p> </li> <li> <p>In the GoTo Node's properties, select \"Entry point\" as the destination type and map it to \"WebexOne_Transfer_EP\"</p> <p></p> </li> <li> <p>Connect the Menu node's Option 1 output to the GoTo Node and the \"undefined\" error output to the \"End of the flow\" node, as shown in the screenshot above </p> </li> <li> <p>Toggle \"Validation\" to \"On\" to ensure there are no validation errors, and then publish the flow.</p> <p></p> </li> </ul>"},{"location":"Excercise2/#section-4-verify-the-solution","title":"Section 4 : Verify the Solution","text":"<ul> <li> <p>Ensure that the agent is logged into the desktop and has an \"Available\" status.</p> </li> <li> <p>Call your provided number from your cell phone again and press Option 1. </p> </li> <li> <p>You should hear no ringback, but instead, be directly presented with the menu option to enter your user ID.</p> </li> <li> <p>This resolves the first problem of creating a new call leg for the transfer.</p> </li> <li> <p>Once you provide the user ID, the agent should receive the call.</p> </li> <li> <p>After the call is accepted, you should now see the two variables defined in the first flow on the agent desktop.</p> <p></p> </li> <li> <p>This confirms that the second problem of variables being lost has also been resolved.</p> </li> </ul> <p>Congratulations !! on successfully completing this exercise! </p> <p>You've learned how to perform seamless internal transfers within entry points and now understand the crucial difference between a Blind Transfer and a GoTo Node.</p>"},{"location":"Excercise3/","title":"Lab 3 - Set Up Outdial Calls","text":""},{"location":"Excercise3/#lab-3-set-up-outdial-calls-in-wxcc","title":"Lab 3 -  Set Up Outdial Calls in WxCC","text":"<p>Please use the following credentials to connect to Control Hub and configure Webex Contact Center:</p> <code>Control Hub URL</code> https://admin.webex.com <code>Username</code> labuserID@wx1.wbx.ai (where ID is your assigned pod number; this ID will be provided by your proctor) <code>Password</code> webexONE1!"},{"location":"Excercise3/#objective","title":"Objective","text":"<p>In this lab exercise, the audience will gain hands-on experience configuring WxCC solutions to enable outdial capabilities from scratch. Furthermore, the exercise will also equip participants with essential debugging skills to identify and rectify frequent implementation errors ensuring a robust and functional deployment.</p>"},{"location":"Excercise3/#section-1-setup-outdial","title":"Section 1 : Setup Outdial","text":"<ul> <li> <p>Log into Webex Control Hub with the provided credentials.</p> </li> <li> <p>In Control Hub, navigate to Services and click on Contact Center.</p> <p></p> </li> <li> <p>In the Contact Center navigation pane, under Customer Experience, select Queues.</p> <p></p> </li> <li> <p>Create a new queue by clicking on the \"Create a Queue\" option.</p> </li> <li> <p>The Queue Creation Wizard will appear. Provide the following details:</p> <ul> <li>General<ul> <li>Name: [Provide a descriptive name for your queue]</li> <li>Contact direction: Outdial Queue</li> <li>Channel type: Telephony</li> </ul> </li> </ul> <p></p> <ul> <li>Contact Routing Settings<ul> <li>AgentAssignment: Teams</li> <li>Routing Pattern: Longest available</li> <li>Call Distribution: Create a group and add the team WebeOne_Team_[num]</li> </ul> </li> </ul> <p></p> <ul> <li>Advanced Settings<ul> <li>Service level threshold: 30 seconds</li> <li>Maximum time in queue: 30 seconds</li> <li>Default music in queue: defaultmusic_on_hold.wav</li> </ul> </li> </ul> <p></p> </li> <li> <p>Once these settings are added, click Create to finalize the queue.</p> </li> <li> <p>Lets create a Entry point to map the queue to this entry point. </p> </li> <li> <p>Navigate back to Customer Experience in Contact Center and click on Channels.</p> <p></p> </li> <li> <p>Create a new channel by clicking on the \"Create a channel\" option.</p> <p></p> </li> <li> <p>The Channel Creation Wizard will appear. Provide the following details:</p> <ul> <li>Name: [Provide a descriptive name for your channel]</li> <li>Channel type: Outbound Telephony</li> <li>Service level threshold: 30 seconds</li> <li>Timezone: America/New York</li> </ul> <p></p> </li> <li> <p>After these settings are added, click Create to finalize the channel.</p> </li> <li> <p>Since outdial is an agent activity, the Agent Desktop should have the capability to call any number outside the WxCC ecosystem. </p> </li> <li> <p>To enable this capability, create an agent profile and map it to the agent.</p> </li> <li> <p>Navigate to Desktop Experience in Contact Center and click on Desktop Profiles.</p> <p></p> </li> <li> <p>In Desktop Profiles, create a new profile by clicking on \"Create Desktop Profile\".</p> <p></p> </li> <li> <p>In the General section, provide the desired name for your profile.</p> <p></p> </li> <li> <p>Move to \"Dial Plans\" by clicking Next button (at the bottom of the screen) a couple of times.</p> </li> <li> <p>Enable \"Outdial\".</p> <ul> <li>Select the newly create entrypoint as an \"Outdial Entry Point\".</li> <li>Select the preconfigured address book \"WebexOne_outdial_AddressBook\" as an \"Address Book\".</li> </ul> <p></p> </li> <li> <p>Move to \"Voice Channel Options\" by clicking Next and ensure that \"Desktop\" is enabled under \"Voice Channels options\".</p> <p></p> </li> <li> <p>Proceed to the end of desktop profile creation by clicking Next and finally Create.</p> </li> <li> <p>Now, Navigate to the User Management section in Contact Center and click on Contact Center Users.</p> </li> <li> <p>Bring up your user and assign the newly created desktop profile under \"Desktop Profile\" and Save changes.</p> <p></p> </li> </ul>"},{"location":"Excercise3/#section-2-test-outdial","title":"Section 2 : Test Outdial","text":"<ul> <li> <p>Now, log in to the Agent Desktop using the provided credentials.</p> <ul> <li>URL: https://desktop.wxcc-us1.cisco.com/</li> <li>Username: Contact the lab proctor if information is unavailable.</li> <li>Password: Contact the lab proctor if information is unavailable.</li> </ul> </li> <li> <p>Please select desktop as telephony option and set the Team as WebexOne_Team_[num] and login.</p> <p></p> </li> <li> <p>Present task is to dial your cell phone number. </p> </li> <li> <p>First, click the Outdial Call option on the top right corner of the desktop. </p> <p></p> </li> <li> <p>You'll notice that the dial pad is missing; the only available option is to search by name, email, or number within the tenant. </p> <p></p> </li> <li> <p>This prevents us from dialing an individual cell phone number directly. </p> </li> <li> <p>To fix this, we need to find where the dial pad setting is controlled. </p> </li> <li> <p>Since this is an agent desktop function, we'll check the agent's desktop profile and the dial plan where we enabled the outdial option.</p> </li> <li> <p>In Control Hub, go back to the Desktop Profile section. </p> </li> <li> <p>Select the profile that's mapped to the agent you are working with.</p> </li> <li> <p>Navigate to the Dial Plans tab. </p> </li> <li> <p>Enable the dial plan functionality and select US as the dial plan. Then, click Save.</p> <p></p> </li> <li> <p>Refresh the Agent Desktop application browser. </p> </li> <li> <p>Click the Outdial option again.</p> </li> <li> <p>You should now see the number pad pop up, allowing you to punch in numbers.</p> </li> <li> <p>Enter your cell phone number. You may add a \"1\" before the number, or it will work without it </p> </li> <li> <p>Click the Dial button.</p> <p></p> </li> <li> <p>You should ideally see an agent-initiated call to the cell phone number, but nothing happens.</p> </li> </ul>"},{"location":"Excercise3/#section-3-troubleshoot-outdial-failure","title":"Section 3 : Troubleshoot Outdial Failure","text":"<ul> <li> <p>Let's troubleshoot to see why this is the case. </p> </li> <li> <p>To figure this out, bring up the browser developer tool (Windows Shortcut: Press F12 Key)</p> <p></p> </li> <li> <p>Once the developer tool is up, ensure that it's on the \"Console\" tab and clear the console logs by selecting the \"Clear Console\" button </p> <p></p> </li> <li> <p>Using the dial pad, dial the cell phone number again.</p> </li> <li> <p>As soon as the call fails, you should see a red error message in the console logs with the message event=OutdialFailed</p> <p></p> </li> <li> <p>Now, let's look closer into the failure message and figure out what the issue might be.</p> </li> <li> <p>For ease, one can copy the error message into a Notepad or Notepad++ application.</p> </li> <li> <p>Search for \"error,\" and at the bottom of the error message, you will notice there is a fetch error on \"Config\" \u2013 \"Config_fetch_error.\" The exact config it's talking about is \"queuemgr\" which basically means queue.</p> <p> </p> </li> <li> <p>This overall means the system is not able to fetch the team details from the queue perspective where agent resides. </p> </li> <li> <p>In WxCC, a queue is always mapped to an entry point via routing flows, so let's go back to the Entry Point for outdial and check the configuration again.</p> </li> <li> <p>Via Control Hub, under \"Customer Experience,\" go back via \"Channel\" to the Outdial Entry Point that was configured.</p> <p></p> </li> <li> <p>Under \"Entry Point Settings,\" you will notice that there is no routing flow mapped.</p> </li> <li> <p>From the dropdown, select the flow \"WebexOne_OutdialUser[num]_Flow\" and fill in these fields:</p> <ul> <li>Music on hold: \"defaultmusic_on_hold\"</li> <li>Version label: Latest</li> <li>Outdial Queue: Select the queue that was created in step 1 of your initial setup.</li> </ul> <p></p> </li> <li> <p>Save the settings.</p> </li> <li> <p>Refresh the Agent Desktop browser and perform the outdial to the cell phone number; the call should now be successful.</p> </li> <li> <p>If you observe the browser debug console logs, you should see a message that will clearly show case its fetching the config and have the team details via the queue ID.</p> </li> </ul>"},{"location":"Excercise3/#section-4-custom-outdial-ani","title":"Section 4 : Custom Outdial ANI","text":"<ul> <li> <p>In many cases, business requirements dictate that the Outdial ANI displayed on customer devices should be set to a specific toll-free or departmental number.</p> </li> <li> <p>Here, the outdial ANI noticed on the cell phone is \"+19842906065\" which is the default configuration set on the tenant level.</p> </li> <li> <p>To, review the Tenant-Level Outdial ANI setting in tenant Settings navigate to the Voice tab and note the existing Outdial ANI which is \"+19842906065\".</p> <p></p> </li> <li> <p>To change to a custom ANI, administrator can create there own outdial ANI.</p> </li> <li> <p>For ease here outdial ANI has already been pre-configured and to review in Desktop Experience, go to Outdial ANI settings.</p> <p></p> </li> <li> <p>Select WebexOne_Outdial_ANI.</p> <p></p> </li> <li> <p>Confirm that it is mapped to the number \"+19842906070\".</p> <p></p> </li> <li> <p>A custom Outdial ANI allows an agent to select the ANI on the desktop during an outdial call, provided the agent\u2019s desktop profile is mapped to the new Outdial ANI.</p> </li> <li> <p>To check in Desktop Experience, open the configured Agent Desktop Profile.</p> </li> <li> <p>Navigate to the Dial Plans section.</p> </li> <li> <p>In the Outdial ANI field, select WebexOne_Outdial_ANI and save your changes.</p> <p></p> </li> <li> <p>Now, Perform an Outdial Call Using the Custom ANI.</p> </li> <li> <p>Log in or refresh the agent desktop.</p> </li> <li> <p>Initiate an outdial call.</p> </li> <li> <p>Verify on the recipient\u2019s device that the displayed ANI is the custom number.</p> </li> </ul> <p>Congratulations !! on completing this exercise! </p> <p>You've not only set up the outdial feature from scratch but also learned how to identify and fix common errors, ensuring your deployments are both functional and reliable.</p>"},{"location":"Excercise4/","title":"Lab 4 - [Bonus] Webrtc Troubleshooting","text":""},{"location":"Excercise4/#task-4-exploring-webrtc-data-and-statistics","title":"Task 4 - Exploring WebRTC data and statistics","text":"<p>Please use the following credentials to connect to Control Hub and configure Webex Contact Center:</p> <code>Control Hub URL</code> https://admin.webex.com <code>Username</code> labuserID@wx1.wbx.ai (where ID is your assigned pod number; this ID will be provided by your proctor) <code>Password</code> webexONE1! <p>Info</p> <p>This task showcases available WebRTC call data and statistics using built-in browser tools and simulates missing audio during the call.</p>"},{"location":"Excercise4/#section-1-exploring-webrtc-internals","title":"Section 1 - Exploring WebRTC internals","text":"<ul> <li>Set your state to 'Available' on the Agent Desktop.</li> <li>Make an inbound call and answer via Agent Desktop when the call is presented.</li> <li>Open a new tab in Google Chrome web browser.</li> <li>Navigate to chrome://webrtc-internals.</li> </ul> <ul> <li>In the WebRTC-internals tab select the active WebRTC session part (desktop.wxcc-us1.cisco.com in its name).</li> </ul> <ul> <li>The following information can be seen:<ol> <li>On the left side (1), you'll find a record of the PeerConnection API activities. The RTCPeerConnection is the central interface in the WebRTC API. It represents the connection between the local and remote peer and provides all the functions and events necessary to establish the connection (more details can be found at https://webrtc.org/getting-started/overview). These traces (1) display interactions with the RTCPeerConnection object and parameters used.</li> <li>On the right side (2), you'll find the metrics collected via the getStats API about the current WebRTC connection.</li> <li>On the bottom (3), you'll find graphs produced by utilizing the getStats API (2) about the current WebRTC connection.</li> </ol> </li> </ul> <ul> <li>Local and remote IPs and ports in use for this particular WebRTC connection can be seen under traces of the PeerConnection API calls.</li> </ul> <ul> <li>Various live call statistics (i.e. sent packets, received packets, latency, dropped packets etc.) related graphs can be seen at the bottom.</li> </ul> <ul> <li>WebRTC log dump can be retrieved by clicking 'Create a WebRTC-Internals dump' and clicking 'Download the \"webrtc-internals dump\" option.</li> </ul> <p>Note</p> <p>WebRTC log dump file can be parsed and analyzed using specific tools, i.e. https://fippo.github.io/webrtc-dump-importer</p> <ul> <li>WebRTC audio can also be captured for diagnostic purposes.</li> </ul> <p></p> <ul> <li> <p>End the call.</p> </li> <li> <p>Change your state to the idle 'Meeting' state on the Agent Desktop.</p> </li> </ul>"},{"location":"Excercise4/#section-2-investigating-missing-audio","title":"Section 2 - Investigating missing audio","text":"<ul> <li> <p>Download task3s2.zip file from https://github.com/asuchank/clus24/raw/main/task3s2.zip and extract it.</p> </li> <li> <p>Make a new call to +19842906065 using WebRTC via Agent Desktop and press 0 (music should be playing).</p> </li> <li> <p>Navigate to chrome://webrtc-internals in a new tab.</p> </li> <li> <p>In the WebRTC-internals tab select the active WebRTC session part (it will have desktop.wxcc-us1.cisco.com in its name).</p> </li> </ul> <p></p> <ul> <li>At the bottom of the WebRTC-internals diagnostic page expand bolded text to uncover graphs for an ongoing session.</li> </ul> <p></p> <ul> <li>Right-click on the task3s2.bat file and choose 'Run as administrator' (audio will be lost for 10 seconds).</li> </ul> <p></p> <ul> <li>Observe packetsReceived/s go down to zero on the expanded graph from before.</li> </ul> <p></p> <ul> <li> <p>Based on the observation above - missing audio was caused by the lack of media packets.</p> </li> <li> <p>End the call.</p> </li> <li> <p>Congratulations, you have completed this task!</p> </li> </ul>"},{"location":"conclusion/","title":"Conclusion","text":""},{"location":"conclusion/#related-sessions-at-webex-one","title":"Related Sessions at Webex One","text":"<ul> <li>BRKXXX-1111 My friend's breakout session</li> </ul>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#overview","title":"Overview","text":""},{"location":"overview/#learning-objectives","title":"Learning Objectives","text":"<p>This lab session is an intermediate-level session for engineers and administrators interested in the voice channel and its related troubleshooting techniques in a Webex Contact Center Solution. The session is divided into three exercises that cover following topics:</p> <ul> <li> <p>Configure and manage inbound call flows: Participants will learn to set up inbound call flows and call distribution strategies.</p> </li> <li> <p>Debug and troubleshoot common issues: The lab will focus on using tools like flow debuggers to identify and fix configuration errors, whether in inbound flows or outbound dialing setups.</p> </li> <li> <p>Handle call transfers and data preservation: Participants will gain experience in ensuring a seamless call transfer process that maintains crucial data (flow variables) for agents.</p> </li> <li> <p>Analyze agent performance: The exercises will allow participants to use call reports to understand and analyze agent behavior, helping them identify the root cause of specific call events like rejections or \"Re-Route on No Answer\" (RONA) events.</p> </li> <li> <p>Set up outdial capabilities: The lab will cover the process of configuring a system to enable agents to make outbound calls.</p> </li> </ul> <p>Essentially, the lab is designed to give participants a holistic view of the call center solution, from initial setup and configuration to troubleshooting complex issues and analyzing performance related to the voice channel.</p>"},{"location":"overview/#disclaimer","title":"Disclaimer","text":"<p>Although the lab design and configuration examples could be used as a reference, for design related questions please contact your representative at Cisco, or a Cisco partner.</p>"},{"location":"overview/#lab-access","title":"Lab Access","text":"<p>This lab leverages Webex Contact Center cloud environment.</p>"},{"location":"topologies/","title":"Lab topologies","text":""},{"location":"topologies/#lab-topologies","title":"Lab topologies","text":""},{"location":"howToUse/admonition/","title":"Custom Admonitions","text":"<p>In addition to the  stock admonitions which are available out of the box we have added some additional branded admonitions which were created by Bobby McGonigle. </p> <p>Blank</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Blank!')\n</code></pre> <p>Vidcast</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Vidcast!')\n</code></pre> <p>Download</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Download!')\n</code></pre> <p>Cedeploy</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Ce-Deploy!')\n</code></pre> <p>Webex</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Webex!')\n</code></pre> <p>Gif</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('How should I pronounce Gif?')\n</code></pre> <p>Important</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Important!')\n</code></pre> <p>Challenge</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Challenge!')\n</code></pre> <p>Tool</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Tool!')\n</code></pre> <p>Curious</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Curious!')\n</code></pre>"},{"location":"howToUse/customFeatures/","title":"Custom Features","text":""},{"location":"howToUse/customFeatures/#adding-a-copy-button-without-a-code-block","title":"Adding a Copy Button Without a Code Block","text":"<p><code>This will copy the following text: &lt;copy&gt;Text to copy&lt;/copy&gt;</code> </p> <p>This will copy the following text: Text to copy</p>"},{"location":"howToUse/customFeatures/#adding-user-specific-variables-into-your-lab-guide","title":"Adding user specific variables into your lab guide","text":"<p>There may be times in which you want to embed some attendee specific information into the instructions of your lab guide, like credentials or phone numbers, which will be used on multiple pages of your lab guide.  You can gather the information via a form or you can pass a pre-encoded JSON string as a URL parameter to populate the variable values into the browser's session storage.  Then you can use a simple HTML tag with a special class name to update the values in the lab guide.  This feature can be combined with the copy button method above.</p>"},{"location":"howToUse/customFeatures/#form-method","title":"Form Method","text":"Show me the code <pre><code>&lt;form id=\"info\"&gt;\n\n\n&lt;label for=\"Admin\"&gt;Admin Login:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Admin\" name=\"Admin\"&gt;&lt;br&gt;\n\n&lt;label for=\"PW\"&gt;Admin Password:&lt;/label&gt;\n&lt;input type=\"text\" id=\"PW\" name=\"PW\"&gt;&lt;br&gt;\n\n&lt;label for=\"EP\"&gt;Inbound Channel Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"EP\" name=\"EP\"&gt;&lt;br&gt;\n\n&lt;label for=\"DN\"&gt;Inbound Channel Phone Number:&lt;/label&gt;\n&lt;input type=\"text\" id=\"DN\" name=\"DN\"&gt;&lt;br&gt;\n\n&lt;label for=\"Queue\"&gt;Queue 1 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Queue\" name=\"Queue\"&gt;&lt;br&gt;\n\n&lt;label for=\"Queue2\"&gt;Queue 2 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Queue2\" name=\"Queue2\"&gt;&lt;br&gt;\n\n&lt;label for=\"Team\"&gt;Team 1 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Team\" name=\"Team\"&gt;&lt;br&gt;\n\n&lt;label for=\"Team2\"&gt;Team 2 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Team2\" name=\"Team2\"&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;button onclick=\"setValues()\"&gt;Update Lab Guide&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> Example Input Form Admin Login: Admin Password: Inbound Channel Name: Inbound Channel Phone Number: Queue 1 Name: Queue 2 Name: Team 1 Name: Team 2 Name: Update Lab Guide <p>Login: Provided by proctor</p> <p>Password: Provided by proctor</p> <p>Assigned Inbound Channel Name: Provided by proctor</p> <p>Assigned Inbound Channel Number: Provided by proctor</p> <p>Assigned Queue Name 1: Provided by proctor</p> <p>Assigned Queue Name 2: Provided by proctor</p> <p>Assigned Team name 1: Provided by proctor</p> <p>Assigned Team name 2: Provided by proctor</p>"},{"location":"howToUse/customFeatures/#url-method","title":"URL Method","text":"<p>If you have a lot of attendee variables in your lab, you may choose to precompile and encode them so that you can simply provide a URL link which will load all of their required information.</p> <p>To see this in action, add this string at the end of the URL for any page on this site: ?eyJBZG1pbiI6ImFkbWluQHh5ei5iaXoiLCJQVyI6InNVcGVyU2VjcmV0MTIzISIsIkVQIjoiRVAxIiwiRE4iOiIrMTkxMDU1NTEyMTUyIiwiUXVldWUiOiJRdWV1ZTEiLCJRdWV1ZTIiOiJRdWV1ZTIiLCJUZWFtIjoiVGVhbTEiLCJUZWFtMiI6IlRlYW0yIn0=</p>"},{"location":"howToUse/initialSetup/","title":"Initial Setup","text":""},{"location":"howToUse/initialSetup/#initial-setup","title":"Initial Setup","text":"<p>This lab guide template uses MKDocs to take your markdown documentation and transform it into an interactive web based lab guide.  You will need to install some software on your PC or Mac in order to take full advantage of the tool which will allow you to view your changes as you save them and ensure that your formatting is exactly how you want it.</p>"},{"location":"howToUse/initialSetup/#prerequisite-software-to-install","title":"Prerequisite Software to Install","text":"<ol> <li>Python</li> <li>Visual Studio Code</li> <li>Git</li> </ol>"},{"location":"howToUse/initialSetup/#setting-up-your-lab-guide-on-your-computer","title":"Setting up your lab guide on your computer","text":""},{"location":"howToUse/initialSetup/#clone-your-repository-with-git","title":"Clone your repository with git","text":"<p>Open Visual Studio Code</p> <p>Click the Source Control button in the left menu </p> <p>Click Clone Repository</p> <p>Enter the repository source:  {{config.extra.repo}}</p> <p>Select or create a new folder to clone the repository into.</p>"},{"location":"howToUse/initialSetup/#build-the-environment","title":"Build the environment","text":"<p>When prompted to open the cloned repository, select open.</p> <p>Drag open the terminal at the bottom of the Visual Studio Code window</p> Show Me <p></p> If you are on a PCIf you are on a Mac <p>In your terminal enter the following commands:</p> <p>python -m venv venv</p> <p>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</p> <p>venv\\Scripts\\activate.ps1</p> <p>pip install -r requirements.txt</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000 </p> <p>In your terminal enter the following commands:</p> <p>python -m venv venv</p> <p>source venv/bin/activate</p> <p>pip install -r requirements.txt</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p>"},{"location":"howToUse/postInitial/","title":"Using the tool after the initial setup","text":""},{"location":"howToUse/postInitial/#using-the-tool-after-the-initial-setup","title":"Using the tool after the initial setup","text":"<p>After the initial setup you will only need to take the following steps:</p> <p>Open Visual Studio Code</p> <p>Click the Source Control button in the left menu </p> <p>Click Open Folder and navigate to the folder where you cloned the repository</p> If you are on a PCIf you are on a Mac <p>In your terminal enter the following commands:</p> <p>venv\\Scripts\\activate.ps1</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p> <p>In your terminal enter the following commands:</p> <p>source venv/bin/activate</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p>"},{"location":"howToUse/references/","title":"Markdown and Other References","text":""},{"location":"howToUse/references/#mk-docs-feature-reference","title":"MK Docs Feature Reference:","text":"<p>https://squidfunk.github.io/mkdocs-material/reference/ </p>"},{"location":"howToUse/references/#markdown-cheat-sheets","title":"Markdown Cheat Sheets:","text":"<p>https://www.markdownguide.org/cheat-sheet/ </p> <p>https://github.com/lifeparticle/Markdown-Cheatsheet </p>"},{"location":"howToUse/syncChanges/","title":"Publishing your changes","text":""},{"location":"howToUse/syncChanges/#publishing-your-changes","title":"Publishing Your Changes","text":"<p>As you progress with the creation of your lab guide, you should sync your changes periodically to GitHub.  </p>"},{"location":"howToUse/syncChanges/#syncing-your-changes-to-github","title":"Syncing your changes to GitHub","text":"<p>Make sure that you have saved all of the files you want to sync up to the repository</p> <p>Click the Source Control button in the left menu </p> <p>Click the plus sign next to each file you want to sync as you hover over the file names or alternatively, click the plus sign next to changes</p> <p>Enter a note about the changes you are making in the message text box</p> <p>Click the down chevron  on the commit button to reveal more options</p> <p>Select Commit &amp; Sync </p>"},{"location":"howToUse/syncChanges/#after-you-sync-your-changes-it-will-take-a-few-minutes-for-github-actions-to-build-the-website-so-that-you-can-view-all-of-the-changes-you-made","title":"After you Sync your changes, it will take a few minutes for GitHub Actions to build the website so that you can view all of the changes you made.","text":""}]}